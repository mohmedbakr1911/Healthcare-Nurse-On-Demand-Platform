generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model credentials {
  user_id                String            @id @db.Uuid
  verification_code      String?           @db.VarChar(255)
  code_expires_at        DateTime?         @db.Timestamp(6)
  password_hash          String?           @db.VarChar(255)
  status                 user_status_enum? @default(pending_verification)
  reset_token            String?           @db.VarChar(400)
  reset_token_expires_at DateTime?         @db.Timestamp(6)
  users                  users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model nurse_profiles {
  user_id                  String    @id @db.Uuid
  first_name               String    @db.VarChar(100)
  last_name                String    @db.VarChar(100)
  specializations          String[]
  years_experience         Int?
  service_radius           Int?      @default(10)
  verification_status      Json?     @default("{}")
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  profile_picture          String?   @db.VarChar(150)
  good_conduct_certificate String?   @db.VarChar(150)
  id_front                 String?   @db.VarChar(150)
  id_back                  String?   @db.VarChar(150)
  syndicate_card           String?   @db.VarChar(150)
  graduation_certificate   String?   @db.VarChar(150)
  available                Boolean?  @default(false)
  rate                     Decimal?  @default(0) @db.Decimal(2, 1)
  users                    users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model patient_profiles {
  user_id           String      @id @db.Uuid
  first_name        String      @db.VarChar(100)
  last_name         String      @db.VarChar(100)
  date_of_birth     DateTime    @db.Date
  gender            gender_enum
  emergency_contact Json
  medical_history   Json?
  insurance_info    Json?
  preferences       Json?       @default("{}")
  created_at        DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?   @default(now()) @db.Timestamptz(6)
  profile_picture   String?     @db.VarChar(150)
  id_front          String?     @db.VarChar(150)
  id_back           String?     @db.VarChar(150)
  users             users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model service_requests {
  id                                       String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id                               String               @db.Uuid
  nurse_id                                 String?              @db.Uuid
  service_type                             String               @db.VarChar(100)
  description                              String?
  patient_location                         Json
  status                                   request_status_enum? @default(pending)
  scheduled_time                           DateTime?            @db.Timestamptz(6)
  estimated_duration                       Int?
  total_amount                             Decimal?             @db.Decimal(10, 2)
  created_at                               DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at                               DateTime?            @default(now()) @db.Timestamptz(6)
  offers                                   offers[]
  users_service_requests_nurse_idTousers   users?               @relation("service_requests_nurse_idTousers", fields: [nurse_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_service_requests_patient_idTousers users                @relation("service_requests_patient_idTousers", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transactions                             transactions[]
}

model transactions {
  id                                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  request_id                           String                   @db.Uuid
  patient_id                           String                   @db.Uuid
  nurse_id                             String                   @db.Uuid
  amount                               Decimal                  @db.Decimal(10, 2)
  platform_fee                         Decimal                  @db.Decimal(10, 2)
  nurse_earnings                       Decimal                  @db.Decimal(10, 2)
  payment_method                       Json
  status                               transaction_status_enum? @default(pending)
  processed_at                         DateTime?                @db.Timestamptz(6)
  created_at                           DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?                @default(now()) @db.Timestamptz(6)
  users_transactions_nurse_idTousers   users                    @relation("transactions_nurse_idTousers", fields: [nurse_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_transactions_patient_idTousers users                    @relation("transactions_patient_idTousers", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_requests                     service_requests         @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id                                                  String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                               String             @unique @db.VarChar(255)
  phone                                               String?            @unique @db.VarChar(20)
  user_type                                           user_type_enum?
  created_at                                          DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                                          DateTime?          @default(now()) @db.Timestamptz(6)
  provider                                            String?            @db.VarChar(50)
  profile_created                                     Boolean?           @default(false)
  credentials                                         credentials?
  nurse_profiles                                      nurse_profiles?
  offers                                              offers[]
  patient_profiles                                    patient_profiles?
  service_requests_service_requests_nurse_idTousers   service_requests[] @relation("service_requests_nurse_idTousers")
  service_requests_service_requests_patient_idTousers service_requests[] @relation("service_requests_patient_idTousers")
  transactions_transactions_nurse_idTousers           transactions[]     @relation("transactions_nurse_idTousers")
  transactions_transactions_patient_idTousers         transactions[]     @relation("transactions_patient_idTousers")
}

model offers {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  service_request_id String             @db.Uuid
  nurse_id           String             @db.Uuid
  offered_amount     Decimal            @db.Decimal(10, 2)
  message            String?            @db.VarChar(300)
  status             offer_status_enum? @default(pending)
  created_at         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?          @default(now()) @db.Timestamptz(6)
  users              users              @relation(fields: [nurse_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_requests   service_requests   @relation(fields: [service_request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([nurse_id, service_request_id])
}

enum gender_enum {
  M
  F
}

enum request_status_enum {
  pending
  matched
  accepted
  en_route
  arrived
  in_progress
  completed
  cancelled
}

enum transaction_status_enum {
  pending
  completed
  failed
  refunded
}

enum user_status_enum {
  active
  suspended
  pending_verification
}

enum user_type_enum {
  patient
  nurse
}

enum offer_status_enum {
  pending
  accepted
  rejected
  expired
}
